<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | T.I.D.]]></title>
  <link href="http://tokkonopapa.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://tokkonopapa.github.com/"/>
  <updated>2013-08-05T00:17:19+09:00</updated>
  <id>http://tokkonopapa.github.com/</id>
  <author>
    <name><![CDATA[tokkonopapa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[common.rb:304:in escape: undefined method gsub for ... (NoMethodError)]]></title>
    <link href="http://tokkonopapa.github.com/blog/2013/02/03/jekyll-error-of-common-rb/"/>
    <updated>2013-02-03T15:46:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2013/02/03/jekyll-error-of-common-rb</id>
    <content type="html"><![CDATA[<p>ruby を 1.9.3-p374 に上げたり、jekyll を 0.12.0 に上げたりしていたら、
<a href="https://github.com/tokkonopapa/jekyll-experiment">jekyll-experiment</a>
がタイトルのようなエラーを吐くようになってしまった。  </p>

<p>とりあえずのモンキーパッチを当てる方法。</p>

<!--more-->

<h3 id="section">エラーの内容</h3>
<p><code>escape</code> メソッドで <code>gsub</code> が未定義だということ。</p>

<pre><code>/Users/****/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/1.9.1/uri/common.rb:304:in `escape': undefined method `gsub' for ["Ruby", "jekyll/hyde"]:Array (NoMethodError)
    from /Users/****/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/1.9.1/uri/common.rb:638:in `escape'
    from /Users/****/.rvm/gems/ruby-1.9.3-p374/gems/jekyll-0.12.0/lib/jekyll/post.rb:140:in `block in url'
    ...
</code></pre>

<p><code>common.rb</code> の該当箇所は、</p>

<pre><code>str.gsub(unsafe) do
</code></pre>

<p><code>post.rb</code> の該当箇所は、</p>

<pre><code>"categories" =&gt; categories.map { |c| URI.escape(c) }.join('/'),
</code></pre>

<p>どうやら、<code>categories</code> に配列 <code>["Ruby", "jekyll/hyde"]</code> を指定しているの原因。</p>

<h3 id="section-1">モンキーパッチ</h3>
<p><code>URI.escape(c)</code> の <code>c</code> を明示的に <code>String</code> に変換する。</p>

<pre><code>"categories" =&gt; categories.map { |c| URI.escape(c.to_s) }.join('/'),
</code></pre>

<p>う〜ん、これでいいのかなぁ（いいわけない！）。カテゴリのアーカイブを作る時に <code>Ruby/jekyll/hyde</code>
になるように、ちゃんと考えなきゃ…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyllの実験的テンプレート]]></title>
    <link href="http://tokkonopapa.github.com/blog/2012/09/22/jekyll-experiment/"/>
    <updated>2012-09-22T15:30:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2012/09/22/jekyll-experiment</id>
    <content type="html"><![CDATA[<p>jekyll で本格的ブログを作るためのテンプレート <a href="https://github.com/tokkonopapa/jekyll-experiment">jekyll-experiment</a> を作ってみたが、色々と作り込むうちに複雑になってきたので、ここに記録しておく。</p>

<!--more-->

<h2 id="section">制作方針</h2>
<ul>
  <li>モジュール化により、カスタマイズし易くすること。</li>
  <li>ブログに必要な最小限の機能が、プラグインの使えない <a href="http://pages.github.com/">GitHub Pages</a> 上の jekyll でも動作すること。</li>
</ul>

<h2 id="section-1">構成</h2>
<pre><code>.
├── _deploy/                # デプロイ時の静的ファイル群を保存しておく
├── _includes/              # 他からインクルードされるテンプレート部品
│     ├── asides/           # サイドバー用各種テンプレート部品
│     ├── post/             # 個別記事ページ用各種テンプレート部品
│     ├── libs/             # 小さなテンプレート部品
│     ├── js/               # 小さな js 部品
│     ├── css/              # 小さな css 部品
│     │     └── pygments/   # pygments 用 css
│     └── bootstrap-2.1.1/  # bootstrap の部品
├── _layouts/               # ページ用テンプレート
├── _plugins/               # 拡張用プラグイン（参考用）
├── _posts/                 # 記事
├── _site/                  # ここに一時的な静的ファイル群が作られる
├── assets/                 # サイト用リソース
│     ├── bootstrap-2.1.1/  # 必要な bootstrap 部品をインクルードする
│     ├── css/              # 必要な css 部品をインクルードする
│     ├── js/               # 必要な js 部品をインクルードする
│     ├── ico/              # ファビコンなど
│     └── img/              # サイト用画像
├── blog/                   # ブログ用テンプレート
└── project/                # プロジェクト用テンプレート
</code></pre>

<h3 id="configyml-">1. <code>_config.yml</code> の設定</h3>

<h4 id="urlbaseurl"><code>url</code>、<code>baseurl</code></h4>
<p>GitHub プロジェクトページの場合は、次のように指定する。</p>

<pre><code>url: http://USERNAME.github.com/REPOSITORY
baseurl: /REPOSITORY
</code></pre>

<h4 id="paginatecolumns"><code>paginate</code>、<code>columns</code></h4>
<p>トップページでの表示記事数と、先頭記事以外のカラム数。</p>

<h4 id="dateformat"><code>date_format</code></h4>
<p>使える書式は、<a href="http://rubydoc.info/gems/liquid/2.2.2/Liquid/StandardFilters#date-instance_method">Module: Liquid::StandardFilters — Documentation for liquid (2.2.2)</a> （GitHub の Liquid バージョンと同じ） を参考に。</p>

<h4 id="truncatelen"><code>truncate_len</code></h4>
<p>トップページで紹介する記事の表示文字数。</p>

<h4 id="navbarlist"><code>navbar_list</code></h4>
<p>次のように <code>{name, link}</code> のペアでナビゲーションバーのメニューを定義。</p>

<pre><code>navbar_list:
- name: Blog
  link: /
- name: Project
  link: /project/
- name: About
  link: /about.html
</code></pre>

<p>サブメニューは、<code>dropdown: &amp;dropdown</code> を使い、次のように定義。</p>

<pre><code>navbar_list:
- name: Blog
  link: /
  dropdown: &amp;dropdown
  - name: Categories
	link: /blog/categories.html
  - name: Tags
	link: /blog/tags.html
</code></pre>

<p>これ以上の多階層化は、<code>_includes/navbar.html</code> に直接マークアップするのが吉。</p>

<p>またリンク部をハイライトするためには、テンプレート側の YAML ディレクティブ <code>group</code> に、親メニューの <code>name</code> を指定する。以下は、<code>/blog/categories.html</code> の例。</p>

<pre><code>---
layout: default
title: Archives
group: Blog
---
</code></pre>

<h4 id="pygmentsstyle"><code>pygments_style</code></h4>
<p><a href="http://pygments.org/">Pygments - Python syntax highlighter</a> の <a href="http://pygments.org/demo/">Online demo</a> で、カラーリングを確認するのが吉。</p>

<p>カラーリングに関しては、次のサイトもご参考。</p>

<ul>
  <li><a href="https://github.com/mojombo/tpw/blob/master/css/syntax.css">tpw/css/syntax.css at master - mojombo/tpw</a><br />
  jekyll 本家による、GitHub のカラー。</li>
  <li><a href="https://github.com/uraimo/pygments-vimstyles">uraimo/pygments-vimstyles - GitHub</a><br />
  VIM で有名なテーマを Pygments 用に変換したスタイルシート。</li>
  <li><a href="http://www.uraimo.com/2011/09/21/from-vim-theme-to-pygments-css/">From VIM Theme to Pygments CSS</a><br />
  VIM 用のスタイルを Pygments 用スタイルに変換する python プログラム。</li>
  <li>Gist に投稿されたスタイル
  <a href="https://gist.github.com/1125708">Solarized Pygments CSS - Gist</a>、
  <a href="https://gist.github.com/2005058">Solarized Light Pygments CSS / Jekyll - Gist</a>、
  <a href="https://gist.github.com/1573884">Solarized Pygments Dark CSS - Gist</a></li>
</ul>

<h3 id="yaml-">2. 記事の YAML ディレクティブ</h3>

<h4 id="excerpt"><code>excerpt</code></h4>
<p>トップページ (index.html) で表示する、記事の要旨。</p>

<h4 id="thumbnail"><code>thumbnail</code></h4>
<p>トップページ (index.html) で表示する、サムネイル画像。</p>

<h4 id="comments"><code>comments</code></h4>
<p>3rd パーティー製コメントシステムを有効にする。</p>

<h4 id="published"><code>published</code></h4>
<p><code>true</code> で記事公開、<code>false</code> で保留。</p>

<h4 id="category"><code>category</code></h4>
<p>カテゴリは、配列 <code>[...]</code> を使って複数指定可。この場合、左から順に親子関係となる。</p>

<h4 id="tags"><code>tags</code></h4>
<p>タグも配列を使用可能。カテゴリとは異なり、親子関係はない。</p>

<h3 id="section-2">3.「続きを読む」機能</h3>
<p>トップページ (index.html) の表示時、<code>_includes/libs/truncate_xxxx</code> で以下の処理を実行する。</p>

<h4 id="excerpt-">3.1 <code>excerpt</code> の処理</h4>
<p>記事の YAML ディレクティブにコレがあれば、要旨として表示する。</p>

<h4 id="more---">3.2 <code>&lt;!--more--&gt;</code> の処理</h4>
<p><code>safe: false</code> な jekyll 環境では、<code>_plugins/postmore.rb</code> を使って <code>&lt;!--more--&gt;</code> で分割した文字列の前半をレンダリングする。一方プラグインが使えない GitHub ページ上の jekyll では、次のように Liquid で、<code>&lt;!--more--&gt;</code> から記事の終わりまでコメント化し、擬似的な more 機能を実現する。</p>

<p>
	{% if post.content contains ‘<!--more-->’ %}
		{{ post.content | remove:’–&gt;’ }}–&gt;
	{% endif %}
</p>

<p>テキストとしては送られるが、高々数十キロバイトだろうから、目をつぶってもらうというわけである。</p>

<p>余談だが、次のような Liquid コードも試してみた。が、適当な1バイトの区切り文字 <code>SEP</code> をセットできないのでダメ。何か良い案はないだろうか？</p>

<p>
	{{ post.content | replace_first:’<!--more-->’, SEP | split:SEP | first }}
</p>

<h5 id="section-3">参考情報</h5>
<ul>
  <li><a href="http://www.jacquesf.com/2011/03/creating-excerpts-in-jekyll-with-wordpress-style-more-html-comments/">Creating Excerpts in Jekyll with Wordpress-style &lt;!–more–&gt; HTML Comments - Jacques Fortier</a><br />
  <code>&lt;--more--&gt;</code> より手前を <code>excerpt</code> とする <code>postmorefilter</code> プラグイン 。</li>
  <li><a href="http://kaspa.rs/2011/04/jekyll-hacks-html-excerpts/">Jekyll hacks - HTML excerpts</a><br />
  <code>&lt;!-- more start --&gt;</code> ～ <code>&lt;-- more end --&gt;</code> 間をコメント化して <code>excerpt</code> とする方法。</li>
</ul>

<h4 id="section-4">3.3 先頭から既定文字数だけを表示する処理</h4>
<p><code>excerpt</code> および <code>&lt;!--more--&gt;</code> が共にない場合、先頭の <code>truncate_len</code> だけ文字を表示する。GitHub 上の jekyll （バージョン 2.2.2） の場合、<code>truncate</code> フィルタがユニコードに対応しておらず、単なるバイト数でカウントされてしまうため、日本語が文字化けする可能性がある。そこでかなりトリッキーな方法ではあるが、末尾の文字コードを調べ、適切な所で丸める処理を Liquid で実装した。</p>

<h3 id="section-5">4. カテゴリ、タグ</h3>
<p><a href="https://github.com/mojombo/jekyll/wiki/Template-Data">Template Data - mojombo/jekyll Wiki</a> にある通り、テンプレートからは <code>site.categories</code> （ハッシュ） や <code>page.categories</code> （配列） などでアクセスすることが出来る。<code>_includes/libs/list_categories</code> と <code>_includes/libs/list_tags</code> にそれらの扱いを集約すると共に、両者をフラグで使い分ける仕様とした。</p>

<p>またカテゴリは、親子関係を表す配列で提供されるのが jekyll の仕様である。例えば、<code>_post/1970-1-1-hello-world.md</code> の YAML ディレクティブに次のようなカテゴリが指定されていたとする。</p>

<pre><code>title: "hello world!"
category: [parent, child]
</code></pre>

<p>もし、<code>_config.yml</code> のパーマリンク設定が <code>permalink: /blog/:categories/:title.html</code> であった場合、上記の記事は、次のように展開される。</p>

<pre><code>/blog/parent/child/hello-world.html
</code></pre>

<h3 id="bootstrap-">5. bootstrap 関連</h3>
<p>コレのコンフィグレーションを色々できるようにしたことが複雑化の原因。不要なら一切を削除するのがお勧め。</p>

<h4 id="section-6">5.1 基本構成</h4>
<p><code>assets/bootstrap-X.Y.Z/</code> 下のファイルが、<code>_includes/bootstrap-X.Y.Z/</code> 下の部品をインクルードする構成とした。</p>

<p>例えば、<code>assets/bootstrap-2.1.1/js/bootstrap.custom.js</code> は、次のように bootstrap の js 部品をインクルードする。</p>

<p>
	—
	—
	{% include bootstrap-2.1.1/js/bootstrap-carousel.js %}
	{% include bootstrap-2.1.1/js/bootstrap-collapse.js %}
	{% include bootstrap-2.1.1/js/bootstrap-dropdown.js %}
	{% include bootstrap-2.1.1/js/bootstrap-tab.js %}
	{% include bootstrap-2.1.1/js/bootstrap-transition.js %}
</p>

<p>コレのポイントは、YAML ディレクティブが空でも jekyll がちゃんと処理してくれて、自分自身のファイル形式に変換してくれること。</p>

<p>css ファイルは、<a href="http://twitter.github.com/bootstrap/customize.html">web-based Customizer</a> から適当なモジュールを選択し、ダウンロードしたファイルで代用している。そのうち LESS をインストールし、モジュール化したい。</p>

<h4 id="configyml--1">5.2 <code>_config.yml</code> の設定。</h4>

<h5 id="bootstrap"><code>bootstrap</code></h5>
<p><code>custom</code> を指定すると <code>/assets/bootstrap-X.Y.Z/</code> のカスタムファイルを用いる。この場合、<code>_includes/bootstrap-X.Y.Z/</code> から必要な部品をインクルードする。<code>original</code> あるいはそれ以外では、<a href="http://www.bootstrapcdn.com/">BootstrapCDN</a> にアップされているファイルを使う。</p>

<h5 id="bootstrapver"><code>bootstrap_ver</code></h5>
<p>バージョン X.Y.Z を指定。</p>

<h5 id="bootswatchver"><code>bootswatch_ver</code></h5>
<p>テーマファイルのバージョンを指定。</p>

<h5 id="responsivebp"><code>responsive_bp</code></h5>
<p>ナビゲーションバーを折り畳みタイプにする、メディアクエリ上のブレーク・ポイント。<code>assets/bootstrap-X.Y.Z/bootstrap-responsive.custom.css</code> に、この値をレンダリングする。</p>

<h5 id="jqueryver"><code>jquery_ver</code></h5>
<p>本当は 1.8.x を使いたいんだけれど、私のスマホ （Optimus L-01D/Android 2.3） のネイティブなブラウザが落ちる。Firefox なら大丈夫。たぶんブラウザのバグ （だと思う）。</p>

<h5 id="section-7">参考情報</h5>
<ul>
  <li><a href="http://developmentseed.org/blog/2011/09/09/jekyll-github-pages/">Using Jekyll and GitHub Pages for Our Site | Development Seed</a><br />
  YAML ディレクティブを空に設定し、CSS や json ファイルを作る方法。GitHub Pages でもちゃんと動く。</li>
</ul>

<h3 id="rakefile-">6. <code>Rakefile</code> のエントリー</h3>

<h4 id="preview"><code>preview</code></h4>
<p><code>rake preview</code> もしくは <code>rake</code> で <a href="http://localhost:4000/">http://localhost:4000/</a> でのテストが可能。</p>

<h4 id="post"><code>post</code></h4>
<p>新規投稿。次の書式が可能。</p>

<pre><code>rake post title="title of my article"
rake post["title of my article"]
</code></pre>

<h4 id="page"><code>page</code></h4>
<p>新規ページの作成。</p>

<pre><code>rake page name="about.html"
</code></pre>

<h4 id="setupremote"><code>setup_remote</code></h4>
<p>記事の公開に <code>git push</code> を使う場合の、リモートの設定。<code>push</code> するリモート側のブランチは、Rakefile 中のグローバルなハッシュ <code>CONFIG['deploy_branch']</code> で指定する。</p>

<h4 id="deploy"><code>deploy</code></h4>
<p><code>setup_remote</code> で設定したリモートサーバに記事を <code>git push</code> する。<code>_site</code> に出来た静的ファイルは、プレビュー中にも変わってしまうため、<code>_deploy</code> ディレクトリにコピーし、デプロイ用ファイルを確定させる。</p>

<h3 id="gemfile-">7. <code>Gemfile</code> 関連</h3>

<h4 id="gem-jekyll"><code>gem 'jekyll'</code></h4>
<p><a href="http://rubygems.org/">RubyGems</a> に現在公開されている <a href="http://rubygems.org/gems/jekyll">jekyll</a> は pygmentize ごとにプロセスを起動するため、処理時間がかかるとのこと （情報源：<a href="http://d.hatena.ne.jp/hokaccha/20120808/1344436656">pygmentsが原因でjekyllが重くなってた - hokaccha.hamalog v2</a>）。GitHub 上の最新バージョンを使う方が吉かも。</p>

<h4 id="gem-gsl"><code>gem 'gsl'</code></h4>
<p>jekyll のソースを読む限り、<code>lsi: false</code> を指定すると、単に最新の記事数件を 「関連する記事」 とするだけである。<code>lsi: true</code> だと、少しはマシになるらしいが、処理時間がかかる模様。<a href="http://rubygems.org/gems/gsl">gsl</a> を使えば、10倍高速化できるとのこと （未確認）。</p>

<h4 id="gem-rake"><code>gem 'rake'</code></h4>
<p>いつの間にか、システムにインストールしたバージョンを 0.9.2.2 に上げてしまったようで、Octopress が指定しているバージョン 0.9.2 と競合するようになった。Octopress 側を <code>bundle exec rake ...</code> で対応しているが、そもそも各アプリごとに gem を分けた方が良いかもしれない。</p>

<h5 id="bundler-">bundler の参考サイト</h5>
<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>[[ruby]最初に知っておけば良かったbundlerの使い方 rails編</td>
          <td>Into my web](http://kozo002.blogspot.jp/2012/01/rubybundler.html)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li><a href="http://blog.mirakui.com/entry/20100703/1278165723">gem管理の新標準ツール”Bundler”のTips - 昼メシ物語</a><br />
  システムの gem と分離させる方法。</li>
  <li><a href="http://d.hatena.ne.jp/itmammoth/20110420/1303309226">複数のRailsアプリのgemを管理するためbundlerを使用する - Oh! My! Enter! ～バッチを起動しようと勢いよくキーを叩いたら、それはシフトキーだった～</a><br />
  gem をすべてアンインストールして、bunder で管理しましょう、の記事。</li>
</ul>

<h3 id="section-8">8. その他、テンプレート作成で参考になったサイト</h3>

<h4 id="jekyllliquid-">jekyll、Liquid の解説</h4>
<ul>
  <li>
    <p><a href="http://rubydoc.info/gems/liquid/2.2.2/Liquid/StandardFilters">Module: Liquid::StandardFilters - Documentation for liquid (2.2.2)</a><br />
  <a href="https://help.github.com/articles/using-jekyll-with-pages">GitHub 上の jekyll バージョン</a> で使える、Liquid 2.2.2 の標準フィルタに関するマニュアル。</p>
  </li>
  <li>
    <p><a href="http://melborne.github.com/2012/05/13/first-step-of-jekyll/">30分のチュートリアルでJekyllを理解する</a><br />
  1ステップづつ、実例を交えながら解説されていて、Jekyll に関しては、ココが一番詳しい。プラグインの作り方がお役立ち。<a href="http://melborne.github.com/2012/05/09/translation-of-jekyll-plugins/">Jekyll Wiki Pluginsの説明ページを勝手に翻訳しました</a> が分かり易い。</p>
  </li>
  <li>
    <p><a href="http://web.sfc.keio.ac.jp/~t10078si/wpx/?p=862">jekyll+github pagesでブログを作る « fragments</a><br />
  git、jekyll のインストール、<a href="">jekyll bootstrap</a> のインストールと構成、記事作成、GitHub への公開。pygments による Syntax highlight の説明アリ。</p>
  </li>
  <li>
    <p><a href="http://krakenbeal.blogspot.jp/2012/05/ruby-jekyll-jekyll-bootstrap.html">ruby と jekyll と jekyll-bootstrap で静的サイトを作る - KRAKENBEAL RECORDS</a><br />
  インストールから公開までの概要。末尾の参考文献がお役立ち。</p>
  </li>
  <li>
    <p><a href="http://css.studiomohawk.com/jekyll/2011/06/11/jekyll/">Jekyll | CSS Radar | Mini Books For Front End Developers</a><br />
  jekyll の基本的解説。Rakefile の作り方がお役立ち。</p>
  </li>
  <li>
    <p><a href="http://css.studiomohawk.com/less/2011/04/03/use_less_to_clean_up_your_css/">LESS - CSSプリプロフェッサ | CSS Radar | Mini Books For Front End Developers</a><br />
  LESS の使い方を含む解説。less.js を使った開発時の使い方と、リリース用のコンパイル方法が解説されている。</p>
  </li>
  <li>
    <p><a href="http://brizzled.clapper.org/blog/2012/03/05/using-twitter-bootstrap-with-jekyll/">Using Twitter Bootstrap with Jekyll - Brizzled</a><br />
  CSS の生成を自動化する LESS 用 Rakefile の書き方など。</p>
  </li>
</ul>

<h4 id="bootstrap-1">Bootstrap</h4>
<ul>
  <li><a href="http://www.bootstrapcdn.com/">BootstrapCDN</a><br />
  Bootstrap と Boostwatch の CDN。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress用Tag Cloudプラグインをリリースします]]></title>
    <link href="http://tokkonopapa.github.com/blog/2012/01/04/octopress-plugin-for-categories-cloud/"/>
    <updated>2012-01-04T21:00:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2012/01/04/octopress-plugin-for-categories-cloud</id>
    <content type="html"><![CDATA[<p>WordPress などの動的 CMS から Octopress に乗り換える記事が目につくが、まだまだプラグインが少ない。
ふと <a href="http://octopress.org/">Octopress</a> も <a href="http://jekyllrb.com/">jekyll</a> のラッパーだということを思い出し、<a href="https://github.com/mojombo/jekyll/wiki/Plugins">Wiki に載ってるプラグイン</a> から易しそうなタグクラウドを3つばかり試してみた。</p>

<ul>
  <li><a href="https://gist.github.com/710577">Jekyll tag cloud / tag pages plugin — Gist</a></li>
  <li><a href="http://vitobotta.com/how-to-migrate-from-wordpress-to-jekyll/">Migrating from Wordpress to Jekyll - Part 2: <strong>Everything</strong> you need to know about Jekyll</a></li>
  <li><del>Yeban’s Weblog - Jekyll - Tag Cloud</del>
<!-- https://github.com/yeban/yeban.github.com/blob/master/_plugins/tag_cloud.rb --></li>
</ul>

<p>結果は、どれも動作しない…</p>

<!--more-->

<p>jekyll には <code>site.categories</code> や <code>site.tags</code> という <a href="https://github.com/mojombo/jekyll/wiki/Template-Data">Template Data</a> があるが、単に Octopress に <code>tags</code> が実装されていないだけだと思う。</p>

<p>ということで、<a href="https://gist.github.com/1577100" title="Gist で公開中">3番目のコードを動くようにしてみた</a> 。文字の大きさをログスケールで変えたりしていて、イイ感じ。</p>

<p>他にも検索してみると、台湾サイトの記事「<a href="http://blog.eddie.com.tw/2011/12/05/add-catetories-to-sidebar-in-octopress/">あなたのOctopressの記事のカテゴリを高めるために</a>」（by Google 翻訳）で、サイドバーにタグクラウドを作るコード（ライセンスは非表記）が紹介されているのを発見。中国系 Octopress サイトでは結構使われている様子。</p>

<p>で、試してみたが、<code>rake preview</code> を実行時、3秒に1度 <code>regenerate</code> してしまい調子が悪い。<code>generate</code> 時にテンプレートの HTML ファイルをダイレクトに生成しているため、<code>preview</code> 時の監視プロセスにより更新判断され、再 <code>generate</code> されてしまうのだ。</p>

<p>ということで、この無限地獄を解消すべく、Octopress プラグインのルールに従って作り変えてみた。</p>

<h3 id="section">使い方</h3>

<p>
	{% tag_cloud [counter:true] %}
	{% category_list [counter:true] %}
</p>

<h4 id="section-1">オプション</h4>

<ul>
  <li>counter:<br />
タグの後ろにカッコ付きで記事数を付ける場合には <code>true</code> を指定する</li>
</ul>

<h4 id="section-2">使用例</h4>

<h5 id="sourceincludecustomasidestagcloudhtml">source/_include/custom/asides/tag_cloud.html</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Tag Cloud<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;tag-cloud&quot;</span><span class="nt">&gt;</span>{% tag_cloud counter:true %}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5 id="sourceincludecustomasidescategorylisthtml">source/_include/custom/asides/category_list.html</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;category-list&quot;</span><span class="nt">&gt;</span>{% category_list counter:true %}<span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5 id="sasscustomstylesscss">sass/custom/_styles.scss</h5>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#tag-cloud</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">line-height</span><span class="o">:</span> <span class="m">2.2em</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h5 id="configyml">_config.yml</h5>

<pre><code># list each of the sidebar modules you want to include, in the order you want them to appear.
# To add custom asides, create files in /source/_includes/custom/asides/ and add them to the list like 'custom/asides/custom_aside_name.html'
default_asides: [custom/asides/tag_cloud.html, custom/asides/tag_cloud.html, ...]
</code></pre>

<h5 id="section-3">適用例</h5>

<p><img class="center" src="https://lh4.googleusercontent.com/-rXn3Ss4_7RI/TwWtjZuBPiI/AAAAAAAAAJA/La0HgCZhcMU/s520/TagCloudPlugin.png" width="520" height="400" title="タグクラウドとカテゴリリスト" ></p>

<h3 id="section-4">ダウンロードとインストール</h3>

<ul>
  <li><a href="https://github.com/tokkonopapa/octopress-tagcloud">tokkonopapa/octopress-tagcloud - GitHub</a><br />
サイドバーに表示するために必要な最低限追加すべきファイルをアップしてある。
自分の Octopress リポジトリとは別にクローンし、ファイルをコピーして使う。</li>
</ul>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>・
</span><span class='line'>├─ plugins/
</span><span class='line'>│  └── tag_cloud.rb
</span><span class='line'>└─ source/
</span><span class='line'>   └─ _includes/
</span><span class='line'>      └─ custom/
</span><span class='line'>         └─ asides/
</span><span class='line'>            ├─ category_list.html
</span><span class='line'>            └─ tag_cloud.html
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
  <li><del>tokkonopapa/octopress - GitHub</del><br />
<del>Octopress 本家のリポジトリをクローンし、別ブランチ（<code>tagcloud</code>）に上記ファイルを追加したもの。自分の Octopress リポジトリ内でリモートリポジトリとして追加し、<code>tagcloud</code> ブランチから追加すべきファイルをチェックアウトする（と出来るハズ）。</del>（このリポジトリは削除しました）</li>
</ul>

<h3 id="section-5">後記</h3>

<p>作者に「GitHub に載せたんだけど、ライセンスとかどう？」と聞いたら、「MIT でいいよ」とのこと。</p>

<p><a href="http://blog.eddie.com.tw/2011/12/05/add-catetories-to-sidebar-in-octopress/#disqus_thread"><img class="center" src="https://lh6.googleusercontent.com/-UNjZ3v2T–4/Twb6V-8YVfI/AAAAAAAAAJY/ulclIKKDhIg/s430/screenshot.png" width="420" height="430" title="ライセンスの確認" ></a></p>

<p>ただ Ruby という言語を触るのは今回が初めてなため、無駄の省き方も分かっていない。さらに、今回のようなプラグインを、Git という仕組みを使ってどうやったら本体にスムーズに導入できるのかも課題。</p>

<p>老練な Git 職人さん、白馬に乗った Rubiest さんに突っ込んでもらえると嬉しい :D</p>
]]></content>
  </entry>
  
</feed>
