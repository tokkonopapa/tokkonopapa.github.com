<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jekyll | T.I.D.]]></title>
  <link href="http://tokkonopapa.github.com/blog/categories/jekyll/atom.xml" rel="self"/>
  <link href="http://tokkonopapa.github.com/"/>
  <updated>2013-08-04T22:10:57+09:00</updated>
  <id>http://tokkonopapa.github.com/</id>
  <author>
    <name><![CDATA[tokkonopapa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[octopressで見出しの目次を記事に埋め込む方法]]></title>
    <link href="http://tokkonopapa.github.com/blog/2013/02/23/octopress-toc/"/>
    <updated>2013-02-23T10:12:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2013/02/23/octopress-toc</id>
    <content type="html"><![CDATA[<p><a href="http://pages.github.com/">GitHub Pages</a> で <a href="https://github.com/mojombo/jekyll">jekyll</a> が 0.12.0 にバージョンアップした事に伴い、
<a href="https://github.com/rtomayko/rdiscount">rdiscount</a> の <a href="https://github.com/mojombo/jekyll/pull/333">目次作成機能（Table Of Contents）</a> が効くようになった。</p>

<p>これを <a href="https://github.com/imathis/octopress">Octopress</a> でも試してみた。
<!--more-->
### 目次</p>

<h3 id="section">作成方法</h3>
<p>#### 設定
<code>_config.yml</code> に以下を追加。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>_config.yml に RDiscount の設定を追加 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">rdiscount</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">extensions</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">‘generate_toc’</span><span class="p-Indicator">]</span>
</span><span class='line'>  <span class="l-Scalar-Plain">toc_token</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">“”</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4 id="section-1">記事の書き方</h4>
<p>記事に <code>{:TOC}</code> を書き込むと、その部分が目次に置き換わる（<code>TOC</code> は <code>Table Of Contents</code> の略）。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>記事に目次を埋め込む </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>### 目次&lt;/p&gt;
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="section-2">日本語の見出し</h3>
<p>見出しに日本語を使うと、<code>generate</code> 時にエラーが出る。</p>

<pre><code>Liquid Exception: incompatible character encodings: UTF-8 and ASCII-8BIT in atom.xml
</code></pre>

<p>この問題は、<a href="https://github.com/mojombo/jekyll/pull/555">Issue #555</a> で報告されている。<a href="https://github.com/Kinvey/jekyll/commit/21325ce2b71ad138be66748b8df7290dd3438ba4">このパッチ</a> の通り、
<code>gems/jekyll-0.12.0/lib/jekyll/converters/markdown.rb</code>
を対策する。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>lib/jekyll/converters/markdown.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gu">@@ -120,7 +120,7 @@ def convert(content)</span>
</span><span class='line'>           rd = RDiscount.new(content, *@rdiscount_extensions)
</span><span class='line'>           html = rd.to_html
</span><span class='line'>           if rd.generate_toc and html.include?(@config[‘rdiscount’][‘toc_token’])
</span><span class='line'><span class="gd">-            html.gsub!(@config[‘rdiscount’][‘toc_token’], rd.toc_content)</span>
</span><span class='line'><span class="gi">+            html.gsub!(@config[‘rdiscount’][‘toc_token’], rd.toc_content.force_encoding(‘utf-8’))</span>
</span><span class='line'>           end
</span><span class='line'>           html
</span><span class='line'>         when ‘maruku’
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ただし <code>force_encoding('utf-8')</code> が気に入られず、取り込まれていない。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[common.rb:304:in escape: undefined method gsub for ... (NoMethodError)]]></title>
    <link href="http://tokkonopapa.github.com/blog/2013/02/03/jekyll-error-of-common-rb/"/>
    <updated>2013-02-03T15:46:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2013/02/03/jekyll-error-of-common-rb</id>
    <content type="html"><![CDATA[<p>ruby を 1.9.3-p374 に上げたり、jekyll を 0.12.0 に上げたりしていたら、
<a href="https://github.com/tokkonopapa/jekyll-experiment">jekyll-experiment</a>
がタイトルのようなエラーを吐くようになってしまった。  </p>

<p>とりあえずのモンキーパッチを当てる方法。
<!--more-->
### エラーの内容 ###
<code>escape</code> メソッドで <code>gsub</code> が未定義だということ。</p>

<pre><code>/Users/****/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/1.9.1/uri/common.rb:304:in `escape': undefined method `gsub' for ["Ruby", "jekyll/hyde"]:Array (NoMethodError)
    from /Users/****/.rvm/rubies/ruby-1.9.3-p374/lib/ruby/1.9.1/uri/common.rb:638:in `escape'
    from /Users/****/.rvm/gems/ruby-1.9.3-p374/gems/jekyll-0.12.0/lib/jekyll/post.rb:140:in `block in url'
    ...
</code></pre>

<p><code>common.rb</code> の該当箇所は、</p>

<pre><code>str.gsub(unsafe) do
</code></pre>

<p><code>post.rb</code> の該当箇所は、</p>

<pre><code>"categories" =&gt; categories.map { |c| URI.escape(c) }.join('/'),
</code></pre>

<p>どうやら、<code>categories</code> に配列 <code>["Ruby", "jekyll/hyde"]</code> を指定しているの原因。</p>

<h3 id="section">モンキーパッチ</h3>
<p><code>URI.escape(c)</code> の <code>c</code> を明示的に <code>String</code> に変換する。</p>

<pre><code>"categories" =&gt; categories.map { |c| URI.escape(c.to_s) }.join('/'),
</code></pre>

<p>う〜ん、これでいいのかなぁ（いいわけない！）。カテゴリのアーカイブを作る時に <code>Ruby/jekyll/hyde</code>
になるように、ちゃんと考えなきゃ…。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyllの実験的テンプレート]]></title>
    <link href="http://tokkonopapa.github.com/blog/2012/09/22/jekyll-experiment/"/>
    <updated>2012-09-22T15:30:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2012/09/22/jekyll-experiment</id>
    <content type="html"><![CDATA[<p>jekyll で本格的ブログを作るためのテンプレート <a href="https://github.com/tokkonopapa/jekyll-experiment">jekyll-experiment</a> を作ってみたが、色々と作り込むうちに複雑になってきたので、ここに記録しておく。
<!--more-->
制作方針
——–
* モジュール化により、カスタマイズし易くすること。
* ブログに必要な最小限の機能が、プラグインの使えない <a href="http://pages.github.com/">GitHub Pages</a> 上の jekyll でも動作すること。</p>

<h2 id="section">構成</h2>
<pre><code>.
├── _deploy/                # デプロイ時の静的ファイル群を保存しておく
├── _includes/              # 他からインクルードされるテンプレート部品
│     ├── asides/           # サイドバー用各種テンプレート部品
│     ├── post/             # 個別記事ページ用各種テンプレート部品
│     ├── libs/             # 小さなテンプレート部品
│     ├── js/               # 小さな js 部品
│     ├── css/              # 小さな css 部品
│     │     └── pygments/   # pygments 用 css
│     └── bootstrap-2.1.1/  # bootstrap の部品
├── _layouts/               # ページ用テンプレート
├── _plugins/               # 拡張用プラグイン（参考用）
├── _posts/                 # 記事
├── _site/                  # ここに一時的な静的ファイル群が作られる
├── assets/                 # サイト用リソース
│     ├── bootstrap-2.1.1/  # 必要な bootstrap 部品をインクルードする
│     ├── css/              # 必要な css 部品をインクルードする
│     ├── js/               # 必要な js 部品をインクルードする
│     ├── ico/              # ファビコンなど
│     └── img/              # サイト用画像
├── blog/                   # ブログ用テンプレート
└── project/                # プロジェクト用テンプレート
</code></pre>

<h3 id="configyml-">1. <code>_config.yml</code> の設定</h3>
<p>#### <code>url</code>、<code>baseurl</code>
GitHub プロジェクトページの場合は、次のように指定する。</p>

<pre><code>url: http://USERNAME.github.com/REPOSITORY
baseurl: /REPOSITORY
</code></pre>

<h4 id="paginatecolumns"><code>paginate</code>、<code>columns</code></h4>
<p>トップページでの表示記事数と、先頭記事以外のカラム数。</p>

<h4 id="dateformat"><code>date_format</code></h4>
<p>使える書式は、<a href="http://rubydoc.info/gems/liquid/2.2.2/Liquid/StandardFilters#date-instance_method">Module: Liquid::StandardFilters — Documentation for liquid (2.2.2)</a> （GitHub の Liquid バージョンと同じ） を参考に。</p>

<h4 id="truncatelen"><code>truncate_len</code></h4>
<p>トップページで紹介する記事の表示文字数。</p>

<h4 id="navbarlist"><code>navbar_list</code></h4>
<p>次のように <code>{name, link}</code> のペアでナビゲーションバーのメニューを定義。</p>

<pre><code>navbar_list:
- name: Blog
  link: /
- name: Project
  link: /project/
- name: About
  link: /about.html
</code></pre>

<p>サブメニューは、<code>dropdown: &amp;dropdown</code> を使い、次のように定義。</p>

<pre><code>navbar_list:
- name: Blog
  link: /
  dropdown: &amp;dropdown
  - name: Categories
	link: /blog/categories.html
  - name: Tags
	link: /blog/tags.html
</code></pre>

<p>これ以上の多階層化は、<code>_includes/navbar.html</code> に直接マークアップするのが吉。</p>

<p>またリンク部をハイライトするためには、テンプレート側の YAML ディレクティブ <code>group</code> に、親メニューの <code>name</code> を指定する。以下は、<code>/blog/categories.html</code> の例。</p>

<pre><code>---
layout: default
title: Archives
group: Blog
---
</code></pre>

<h4 id="pygmentsstyle"><code>pygments_style</code></h4>
<p><a href="http://pygments.org/">Pygments - Python syntax highlighter</a> の <a href="http://pygments.org/demo/">Online demo</a> で、カラーリングを確認するのが吉。</p>

<p>カラーリングに関しては、次のサイトもご参考。</p>

<ul>
  <li><a href="https://github.com/mojombo/tpw/blob/master/css/syntax.css">tpw/css/syntax.css at master - mojombo/tpw</a><br />
  jekyll 本家による、GitHub のカラー。</li>
  <li><a href="https://github.com/uraimo/pygments-vimstyles">uraimo/pygments-vimstyles - GitHub</a><br />
  VIM で有名なテーマを Pygments 用に変換したスタイルシート。</li>
  <li><a href="http://www.uraimo.com/2011/09/21/from-vim-theme-to-pygments-css/">From VIM Theme to Pygments CSS</a><br />
  VIM 用のスタイルを Pygments 用スタイルに変換する python プログラム。</li>
  <li>Gist に投稿されたスタイル
  <a href="https://gist.github.com/1125708">Solarized Pygments CSS - Gist</a>、
  <a href="https://gist.github.com/2005058">Solarized Light Pygments CSS / Jekyll - Gist</a>、
  <a href="https://gist.github.com/1573884">Solarized Pygments Dark CSS - Gist</a></li>
</ul>

<h3 id="yaml-">2. 記事の YAML ディレクティブ</h3>
<p>#### <code>excerpt</code>
トップページ (index.html) で表示する、記事の要旨。</p>

<h4 id="thumbnail"><code>thumbnail</code></h4>
<p>トップページ (index.html) で表示する、サムネイル画像。</p>

<h4 id="comments"><code>comments</code></h4>
<p>3rd パーティー製コメントシステムを有効にする。</p>

<h4 id="published"><code>published</code></h4>
<p><code>true</code> で記事公開、<code>false</code> で保留。</p>

<h4 id="category"><code>category</code></h4>
<p>カテゴリは、配列 <code>[...]</code> を使って複数指定可。この場合、左から順に親子関係となる。</p>

<h4 id="tags"><code>tags</code></h4>
<p>タグも配列を使用可能。カテゴリとは異なり、親子関係はない。</p>

<h3 id="section-1">3.「続きを読む」機能</h3>
<p>トップページ (index.html) の表示時、<code>_includes/libs/truncate_xxxx</code> で以下の処理を実行する。</p>

<h4 id="excerpt-">3.1 <code>excerpt</code> の処理</h4>
<p>記事の YAML ディレクティブにコレがあれば、要旨として表示する。</p>

<h4 id="more---">3.2 <code>&lt;!--more--&gt;</code> の処理</h4>
<p><code>safe: false</code> な jekyll 環境では、<code>_plugins/postmore.rb</code> を使って <code>&lt;!--more--&gt;</code> で分割した文字列の前半をレンダリングする。一方プラグインが使えない GitHub ページ上の jekyll では、次のように Liquid で、<code>&lt;!--more--&gt;</code> から記事の終わりまでコメント化し、擬似的な more 機能を実現する。</p>

<p>
	{% if post.content contains ‘<!--more-->’ %}
		{{ post.content | remove:’–&gt;’ }}–&gt;
	{% endif %}
</p>

<p>テキストとしては送られるが、高々数十キロバイトだろうから、目をつぶってもらうというわけである。</p>

<p>余談だが、次のような Liquid コードも試してみた。が、適当な1バイトの区切り文字 <code>SEP</code> をセットできないのでダメ。何か良い案はないだろうか？</p>

<p>
	{{ post.content | replace_first:’<!--more-->’, SEP | split:SEP | first }}
</p>

<h5 id="section-2">参考情報</h5>
<ul>
  <li><a href="http://www.jacquesf.com/2011/03/creating-excerpts-in-jekyll-with-wordpress-style-more-html-comments/">Creating Excerpts in Jekyll with Wordpress-style &lt;!–more–&gt; HTML Comments - Jacques Fortier</a><br />
  <code>&lt;--more--&gt;</code> より手前を <code>excerpt</code> とする <code>postmorefilter</code> プラグイン 。</li>
  <li><a href="http://kaspa.rs/2011/04/jekyll-hacks-html-excerpts/">Jekyll hacks - HTML excerpts</a><br />
  <code>&lt;!-- more start --&gt;</code> ～ <code>&lt;-- more end --&gt;</code> 間をコメント化して <code>excerpt</code> とする方法。</li>
</ul>

<h4 id="section-3">3.3 先頭から既定文字数だけを表示する処理</h4>
<p><code>excerpt</code> および <code>&lt;!--more--&gt;</code> が共にない場合、先頭の <code>truncate_len</code> だけ文字を表示する。GitHub 上の jekyll （バージョン 2.2.2） の場合、<code>truncate</code> フィルタがユニコードに対応しておらず、単なるバイト数でカウントされてしまうため、日本語が文字化けする可能性がある。そこでかなりトリッキーな方法ではあるが、末尾の文字コードを調べ、適切な所で丸める処理を Liquid で実装した。</p>

<h3 id="section-4">4. カテゴリ、タグ</h3>
<p><a href="https://github.com/mojombo/jekyll/wiki/Template-Data">Template Data - mojombo/jekyll Wiki</a> にある通り、テンプレートからは <code>site.categories</code> （ハッシュ） や <code>page.categories</code> （配列） などでアクセスすることが出来る。<code>_includes/libs/list_categories</code> と <code>_includes/libs/list_tags</code> にそれらの扱いを集約すると共に、両者をフラグで使い分ける仕様とした。</p>

<p>またカテゴリは、親子関係を表す配列で提供されるのが jekyll の仕様である。例えば、<code>_post/1970-1-1-hello-world.md</code> の YAML ディレクティブに次のようなカテゴリが指定されていたとする。</p>

<pre><code>title: "hello world!"
category: [parent, child]
</code></pre>

<p>もし、<code>_config.yml</code> のパーマリンク設定が <code>permalink: /blog/:categories/:title.html</code> であった場合、上記の記事は、次のように展開される。</p>

<pre><code>/blog/parent/child/hello-world.html
</code></pre>

<h3 id="bootstrap-">5. bootstrap 関連</h3>
<p>コレのコンフィグレーションを色々できるようにしたことが複雑化の原因。不要なら一切を削除するのがお勧め。</p>

<h4 id="section-5">5.1 基本構成</h4>
<p><code>assets/bootstrap-X.Y.Z/</code> 下のファイルが、<code>_includes/bootstrap-X.Y.Z/</code> 下の部品をインクルードする構成とした。</p>

<p>例えば、<code>assets/bootstrap-2.1.1/js/bootstrap.custom.js</code> は、次のように bootstrap の js 部品をインクルードする。</p>

<p>
	—
	—
	{% include bootstrap-2.1.1/js/bootstrap-carousel.js %}
	{% include bootstrap-2.1.1/js/bootstrap-collapse.js %}
	{% include bootstrap-2.1.1/js/bootstrap-dropdown.js %}
	{% include bootstrap-2.1.1/js/bootstrap-tab.js %}
	{% include bootstrap-2.1.1/js/bootstrap-transition.js %}
</p>

<p>コレのポイントは、YAML ディレクティブが空でも jekyll がちゃんと処理してくれて、自分自身のファイル形式に変換してくれること。</p>

<p>css ファイルは、<a href="http://twitter.github.com/bootstrap/customize.html">web-based Customizer</a> から適当なモジュールを選択し、ダウンロードしたファイルで代用している。そのうち LESS をインストールし、モジュール化したい。</p>

<h4 id="configyml--1">5.2 <code>_config.yml</code> の設定。</h4>

<h5 id="bootstrap"><code>bootstrap</code></h5>
<p><code>custom</code> を指定すると <code>/assets/bootstrap-X.Y.Z/</code> のカスタムファイルを用いる。この場合、<code>_includes/bootstrap-X.Y.Z/</code> から必要な部品をインクルードする。<code>original</code> あるいはそれ以外では、<a href="http://www.bootstrapcdn.com/">BootstrapCDN</a> にアップされているファイルを使う。</p>

<h5 id="bootstrapver"><code>bootstrap_ver</code></h5>
<p>バージョン X.Y.Z を指定。</p>

<h5 id="bootswatchver"><code>bootswatch_ver</code></h5>
<p>テーマファイルのバージョンを指定。</p>

<h5 id="responsivebp"><code>responsive_bp</code></h5>
<p>ナビゲーションバーを折り畳みタイプにする、メディアクエリ上のブレーク・ポイント。<code>assets/bootstrap-X.Y.Z/bootstrap-responsive.custom.css</code> に、この値をレンダリングする。</p>

<h5 id="jqueryver"><code>jquery_ver</code></h5>
<p>本当は 1.8.x を使いたいんだけれど、私のスマホ （Optimus L-01D/Android 2.3） のネイティブなブラウザが落ちる。Firefox なら大丈夫。たぶんブラウザのバグ （だと思う）。</p>

<h5 id="section-6">参考情報</h5>
<ul>
  <li><a href="http://developmentseed.org/blog/2011/09/09/jekyll-github-pages/">Using Jekyll and GitHub Pages for Our Site | Development Seed</a><br />
  YAML ディレクティブを空に設定し、CSS や json ファイルを作る方法。GitHub Pages でもちゃんと動く。</li>
</ul>

<h3 id="rakefile-">6. <code>Rakefile</code> のエントリー</h3>
<p>#### <code>preview</code>
<code>rake preview</code> もしくは <code>rake</code> で <a href="http://localhost:4000/">http://localhost:4000/</a> でのテストが可能。</p>

<h4 id="post"><code>post</code></h4>
<p>新規投稿。次の書式が可能。</p>

<pre><code>rake post title="title of my article"
rake post["title of my article"]
</code></pre>

<h4 id="page"><code>page</code></h4>
<p>新規ページの作成。</p>

<pre><code>rake page name="about.html"
</code></pre>

<h4 id="setupremote"><code>setup_remote</code></h4>
<p>記事の公開に <code>git push</code> を使う場合の、リモートの設定。<code>push</code> するリモート側のブランチは、Rakefile 中のグローバルなハッシュ <code>CONFIG['deploy_branch']</code> で指定する。</p>

<h4 id="deploy"><code>deploy</code></h4>
<p><code>setup_remote</code> で設定したリモートサーバに記事を <code>git push</code> する。<code>_site</code> に出来た静的ファイルは、プレビュー中にも変わってしまうため、<code>_deploy</code> ディレクトリにコピーし、デプロイ用ファイルを確定させる。</p>

<h3 id="gemfile-">7. <code>Gemfile</code> 関連</h3>
<p>#### <code>gem 'jekyll'</code>
<a href="http://rubygems.org/">RubyGems</a> に現在公開されている <a href="http://rubygems.org/gems/jekyll">jekyll</a> は pygmentize ごとにプロセスを起動するため、処理時間がかかるとのこと （情報源：<a href="http://d.hatena.ne.jp/hokaccha/20120808/1344436656">pygmentsが原因でjekyllが重くなってた - hokaccha.hamalog v2</a>）。GitHub 上の最新バージョンを使う方が吉かも。</p>

<h4 id="gem-gsl"><code>gem 'gsl'</code></h4>
<p>jekyll のソースを読む限り、<code>lsi: false</code> を指定すると、単に最新の記事数件を 「関連する記事」 とするだけである。<code>lsi: true</code> だと、少しはマシになるらしいが、処理時間がかかる模様。<a href="http://rubygems.org/gems/gsl">gsl</a> を使えば、10倍高速化できるとのこと （未確認）。</p>

<h4 id="gem-rake"><code>gem 'rake'</code></h4>
<p>いつの間にか、システムにインストールしたバージョンを 0.9.2.2 に上げてしまったようで、Octopress が指定しているバージョン 0.9.2 と競合するようになった。Octopress 側を <code>bundle exec rake ...</code> で対応しているが、そもそも各アプリごとに gem を分けた方が良いかもしれない。</p>

<h5 id="bundler-">bundler の参考サイト</h5>
<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>[[ruby]最初に知っておけば良かったbundlerの使い方 rails編</td>
          <td>Into my web](http://kozo002.blogspot.jp/2012/01/rubybundler.html)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li><a href="http://blog.mirakui.com/entry/20100703/1278165723">gem管理の新標準ツール”Bundler”のTips - 昼メシ物語</a><br />
  システムの gem と分離させる方法。</li>
  <li><a href="http://d.hatena.ne.jp/itmammoth/20110420/1303309226">複数のRailsアプリのgemを管理するためbundlerを使用する - Oh! My! Enter! ～バッチを起動しようと勢いよくキーを叩いたら、それはシフトキーだった～</a><br />
  gem をすべてアンインストールして、bunder で管理しましょう、の記事。</li>
</ul>

<h3 id="section-7">8. その他、テンプレート作成で参考になったサイト</h3>
<p>#### jekyll、Liquid の解説
* <a href="http://rubydoc.info/gems/liquid/2.2.2/Liquid/StandardFilters">Module: Liquid::StandardFilters - Documentation for liquid (2.2.2)</a><br />
	<a href="https://help.github.com/articles/using-jekyll-with-pages">GitHub 上の jekyll バージョン</a> で使える、Liquid 2.2.2 の標準フィルタに関するマニュアル。</p>

<ul>
  <li>
    <p><a href="http://melborne.github.com/2012/05/13/first-step-of-jekyll/">30分のチュートリアルでJekyllを理解する</a><br />
  1ステップづつ、実例を交えながら解説されていて、Jekyll に関しては、ココが一番詳しい。プラグインの作り方がお役立ち。<a href="http://melborne.github.com/2012/05/09/translation-of-jekyll-plugins/">Jekyll Wiki Pluginsの説明ページを勝手に翻訳しました</a> が分かり易い。</p>
  </li>
  <li>
    <p><a href="http://web.sfc.keio.ac.jp/~t10078si/wpx/?p=862">jekyll+github pagesでブログを作る « fragments</a><br />
  git、jekyll のインストール、<a href="">jekyll bootstrap</a> のインストールと構成、記事作成、GitHub への公開。pygments による Syntax highlight の説明アリ。</p>
  </li>
  <li>
    <p><a href="http://krakenbeal.blogspot.jp/2012/05/ruby-jekyll-jekyll-bootstrap.html">ruby と jekyll と jekyll-bootstrap で静的サイトを作る - KRAKENBEAL RECORDS</a><br />
  インストールから公開までの概要。末尾の参考文献がお役立ち。</p>
  </li>
  <li>
    <p><a href="http://css.studiomohawk.com/jekyll/2011/06/11/jekyll/">Jekyll | CSS Radar | Mini Books For Front End Developers</a><br />
  jekyll の基本的解説。Rakefile の作り方がお役立ち。</p>
  </li>
  <li>
    <p><a href="http://css.studiomohawk.com/less/2011/04/03/use_less_to_clean_up_your_css/">LESS - CSSプリプロフェッサ | CSS Radar | Mini Books For Front End Developers</a><br />
  LESS の使い方を含む解説。less.js を使った開発時の使い方と、リリース用のコンパイル方法が解説されている。</p>
  </li>
  <li>
    <p><a href="http://brizzled.clapper.org/blog/2012/03/05/using-twitter-bootstrap-with-jekyll/">Using Twitter Bootstrap with Jekyll - Brizzled</a><br />
  CSS の生成を自動化する LESS 用 Rakefile の書き方など。</p>
  </li>
</ul>

<h4 id="bootstrap-1">Bootstrap</h4>
<ul>
  <li><a href="http://www.bootstrapcdn.com/">BootstrapCDN</a><br />
  Bootstrap と Boostwatch の CDN。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopressのテーマ - classicの構成]]></title>
    <link href="http://tokkonopapa.github.com/blog/2011/12/29/octopress-classic-theme-structure/"/>
    <updated>2011-12-29T17:34:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2011/12/29/octopress-classic-theme-structure</id>
    <content type="html"><![CDATA[<p>いつか Octopress をカスタマイズし、オリジナルのテーマを作るときのために、ファイル構成をヒモ解いた。
<!--more-->
### 1. テーマの概要 ###</p>

<h4 id="section">テンプレートファイル</h4>
<p><code>rake install</code> の時点で、<code>.themes/classic</code> から <code>source</code> にコピーされる。</p>

<h4 id="section-1">設定ファイル</h4>
<ul>
  <li><strong>_config.yml</strong><br />
  ここで定義された変数がテンプレート中 <code>site.変数名</code> でアクセスされる。</li>
</ul>

<h4 id="section-2">構成の概要</h4>
<pre><code>source/
├── _layouts/    # トップページ、個別記事ページ、カテゴリアーカイブページのレイアウト
└── _includes/   # ページレイアウト用の部品
    ├── post/    # サイトのメタデータ、ソーシャルメディア、コメントシステム用部品
	├── asides/  # テーマのサイドバー用部品
	└── custom/  # カスタマイズ用部品（&lt;head&gt;、&lt;header&gt;、&lt;navigation&gt;、&lt;aside&gt;、&lt;footer&gt;）
</code></pre>

<h3 id="section-3">2. テンプレートファイルの構成</h3>

<h4 id="section-4">ページ</h4>
<pre><code>└── _layouts/
    ├── default.html
    ├── page.html (layout: default)
    ├── post.html (layout: default, single: true)
    └── category_index.html (layout: page, footer: false)
</code></pre>

<h4 id="ltheadgt">&lt;head&gt;</h4>
<pre><code>└── _includes/
    ├── head.html
    ├── custom/head.html
    └── google_analytics.html
</code></pre>

<h4 id="rss">RSS</h4>
<pre><code>└── _includes/
    └── custom/category_feed.xml
</code></pre>

<h4 id="section-5">ヘッダー</h4>
<pre><code>└── _includes/
    ├── header.html
    └── custom/header.html
</code></pre>

<h4 id="section-6">ナビゲーション・メニュー</h4>
<pre><code>└── _includes/
    ├── navigation.html
    └── custom/navigation.html
</code></pre>

<h4 id="section-7">記事</h4>
<pre><code>└── _includes/
    ├── article.html			# post.html、index.html から
    ├── post/author.html		# post.html、page.html から
    ├── post/categories.html	# post.html、page.html から
    ├── post/date.html			# post.html、page.html、index.html から
    ├── post/disqus_thread.html	# post.html、page.html から
    └── post/sharing.html		# post.html、page.html から
</code></pre>

<h4 id="section-8">サイドバー・パーツ</h4>
<pre><code>└── _includes/
    ├── custom/asides/about.html
    ├── asides/recent_posts.html
    ├── asides/github.html
    ├── asides/delicious.html
    ├── asides/googleplus.html
    ├── asides/pinboard.html
    └── asides/twitter.html
</code></pre>

<h4 id="section-9">フッター</h4>
<pre><code>└── _includes/
    ├── footer.html
    └── custom/footer.html
</code></pre>

<h4 id="section-10">ソーシャル・パーツ</h4>
<pre><code>└── _includes/
    ├── after_footer.html
    ├── custom/after_footer.html	# コメントのみ
    ├── disqus.html					# after_footer.html から
    ├── facebook_like.html			# after_footer.html から
    ├── google_plus_one.html		# after_footer.html から
    └── twitter_sharing.html		# after_footer.html から
</code></pre>

<h4 id="section-11">アーカイブ</h4>
<pre><code>└── _includes/
    └── archive_post.html	# category_index.html、blog/archives/index.html から
</code></pre>

<h3 id="section-12">3. 生成されるファイルの構成</h3>
<pre><code>├── index.html (layout: default)
├── atom.xml
├── blog/
│   └── archives/
│       └── index.html
├── sitemap.xml
├── favicon.png
├── images/
│   ├── bird_32_gray.png
│   ├── bird_32_gray_fail.png
│   ├── code_bg.png
│   ├── dotted-border.png
│   ├── email.png
│   ├── line-tile.png
│   ├── noise.png
│   ├── rss.png
│   └── search.png
├── javascripts/
│   ├── ender.js
│   ├── github.js
│   ├── libs/
│   │   ├── ender.js
│   │   ├── jXHR.js
│   │   └── swfobject-dynamic.js
│   ├── modernizr-2.0.js
│   ├── octopress.js
│   ├── pinboard.js
│   └── twitter.js
└── stylesheets/
	└── screen.css
</code></pre>

<h3 id="octopress">4. Octopressの動作</h3>

<h4 id="section-13">–新規投稿–</h4>

<h5 id="section-14">コマンド</h5>
<pre><code>rake new_post['post title']
</code></pre>

<h5 id="section-15">ファイル</h5>
<pre><code>└── _post/YYYY-MM-DD-post-title.markdown
</code></pre>

<h5 id="yaml">YAMLブロック</h5>
<pre><code>---
layout: post
title: "post title"
date: YYYY-MM-DD hh:mm
comments: true
categories: [category1, ...]
---
</code></pre>

<h4 id="section-16">–新規ページ–</h4>

<h5 id="section-17">コマンド</h5>
<pre><code>rake new_page[my-new-page]
rake new_page[my-new-page.html]
</code></pre>

<h5 id="section-18">ファイル</h5>
<pre><code>├── my-new-page/index.markdown	# rake new_page[my-new-page]
└── my-new-page/index.html		# rake new_page[my-new-page.html]
</code></pre>

<h5 id="yaml-1">YAMLブロック</h5>
<pre><code>---
layout: page
title: 
date: YYYY-MM-DD hh:mm
comments: true
sharing: true
footer: true
---
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jekyllで作る簡単GitHub Pages]]></title>
    <link href="http://tokkonopapa.github.com/blog/2011/12/28/easy-usage-of-jekyll-on-github/"/>
    <updated>2011-12-28T01:03:00+09:00</updated>
    <id>http://tokkonopapa.github.com/blog/2011/12/28/easy-usage-of-jekyll-on-github</id>
    <content type="html"><![CDATA[<p><a href="http://jekyllrb.com/">jekyll</a>（ジキル）は、テンプレートを使って静的な Web サイトを構築するための Ruby プログラム。</p>

<p>通常はローカルに jekyll をインストールするが、GitHub Pages では必ずしも必要ないという話。
<!--more-->
### 通常の手順 ###
<a href="https://github.com/mojombo/jekyll/wiki/Usage">こちら</a> に基本的な手順の説明。</p>

<ol>
  <li>
    <p>ローカルな Ruby 環境に <a href="https://github.com/mojombo/jekyll/wiki/Install">jekyll をインストール</a> する</p>
  </li>
  <li>
    <p>jekyll に必要な <a href="https://github.com/mojombo/jekyll/wiki/Usage">テンプレートファイル群</a> を構成し、<a href="https://github.com/mojombo/jekyll/wiki/Configuration"><code>_config.yml</code></a> や <a href="https://github.com/mojombo/jekyll/wiki/Pagination">テンプレートファイル</a> を設定する</p>
  </li>
  <li>
    <p><a href="http://yaml.org/">YAML</a> で記述した先頭ブロックの <a href="https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter">レイアウトとタイトル</a> に続けて、 HTML、Markdown、textile のいずれかの記法を使って記事を書く</p>
  </li>
  <li>
    <p>jekyll で HTML ページを生成し（<code>jekyll --server --auto</code>）、ローカルで確認（<a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a>）、デプロイ（<code>_site</code> に生成されたページ群を git 経由でリモートにコピー）する</p>
  </li>
</ol>

<h3 id="github-pages-">GitHub Pages の場合</h3>
<p>一方 GitHub では、<a href="http://pages.github.com/">GitHub Pages</a> 上に jekyll に必要なファイル群があれば、自動的に HTML を生成してくれるので、必ずしもローカルに jekyll をインストールしなくても何とかなる。
もっともローカルで最終的なレンダリング結果を確認するためにも、jekyll をインストールするに越したことはないが…</p>

<p>1ページだけの GitHub Pages なら、最小構成ファイル群は以下の通り。</p>

<p><div><script src='https://gist.github.com/1532174.js?file=Basic-Structure'></script>
<noscript><pre><code>.
├─ _layouts
│ └─ default.html
├─ css
│ └─ styles.css
└─ index.md</code></pre></noscript></div>
</p>

<p>次は、テンプレートファイル <code>default.html</code> の例。</p>

<p><div><script src='https://gist.github.com/1532174.js?file=default.html'></script>
<noscript><pre><code>&lt;!doctype html&gt;
&lt;html lang=&quot;ja&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;
&lt;title&gt;{% if page.title %}{{ page.title }}{% endif %}&lt;/title&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;css/styles.css&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
{{ content }}
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>
</p>

<p><code>index.md</code> には <code>default.html</code> の <code>content</code> の中身を記述する。</p>

<p><div><script src='https://gist.github.com/1532174.js?file=index.md'></script>
<noscript><pre><code>---
layout: default
title: プロジェクト・タイトル
---

プロジェクト・タイトル
======================
ここにプロジェクトの概要を書きます。
...</code></pre></noscript></div>
</p>

<p><code>index.md</code> 以外にも、<code>index.html</code> や <code>index.textile</code> でも OK だが、先頭の <code>layout</code>、<code>title</code> が重要。これがないとレンダリングしてくれない。</p>

<p><code>css/styles.css</code> で装飾し、必要なら <code>images</code> や <code>script</code>、<code>favicon.ico</code> などもお好みで。
そしてこれらファイル群を プロジェクト・リポジトリの <code>gh-pages</code> ブランチに <a href="http://pages.github.com/#project_pages" title="pushの仕方">push</a> する。</p>

<h3 id="section">さらに複雑なテンプレートの作り方</h3>
<p><img class="right" src="https://lh6.googleusercontent.com/-XPYN1_uoW2g/TvwH9lgXi-I/AAAAAAAAAB4/ps1ZlNCzbMo/s336/ComplexStructure.png" width="250" height="336" title="“ページの構成”" ></p>

<p>サイドバー付きページのテンプレートを、<a href="http://www.initializr.com/">Initializr 2</a> をベースに構成する。</p>

<p><a href="https://github.com/tokkonopapa/Initializr2-on-jekyll/tree/gh-pages"><img src="https://lh4.googleusercontent.com/-001qniGUDbI/TvxeLnMhu-I/AAAAAAAAACg/vCusw7WbURI/s256/Initializr2-on-jekyll.png" width="256" height="236" title="“実際の GitHub Pages 適用例”" ></a></p>

<div style="clear:both"></div>

<p><div><script src='https://gist.github.com/1532144.js?file=README.txt'></script>
<noscript><pre><code>.
├─ _includes
│    ├─ head.html
│    ├─ header.html
│    ├─ aside.html
│    ├─ footer.html
│    └─ script.html
├─ _layouts
│    ├─ default.html
│    └─ page.html
├─ css
│    └─ style.css
├─ js
│    ├─ libs
│    │   └─ modernizr-2.0.6.min.js
│    └─ script.js
├─ index.md
├─ demo.html
└─ documents.md</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=_config.yml'></script>
<noscript><pre><code># ----------------------- #
#      Main Configs       #
# ----------------------- #

url: http://username.github.com/
title: サイトのタイトル
author: username

# ----------------------- #
#   3rd Party Settings    #
# ----------------------- #

# Google Analytics
google_analytics_tracking_id: UA-XXXXXXXX-X</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=default.html'></script>
<noscript><pre><code>&lt;!doctype html&gt;
&lt;!--[if lt IE 7]&gt; &lt;html class=&quot;no-js ie6 oldie&quot; lang=&quot;ja&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;    &lt;html class=&quot;no-js ie7 oldie&quot; lang=&quot;ja&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;    &lt;html class=&quot;no-js ie8 oldie&quot; lang=&quot;ja&quot;&gt; &lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html class=&quot;no-js&quot; lang=&quot;ja&quot;&gt; &lt;!--&lt;![endif]--&gt;
{% include head.html %}
&lt;body&gt;
{% include header.html %}
&lt;div id=&quot;main-container&quot;&gt;
	&lt;div id=&quot;main&quot; class=&quot;wrapper clearfix&quot;&gt;
		&lt;article&gt;
{{ content }}
		&lt;/article&gt;
{% include aside.html %}
	&lt;/div&gt; &lt;!-- #main --&gt;
&lt;/div&gt; &lt;!-- #main-container --&gt;
{% include footer.html %}
{% include script.html %}
&lt;/body&gt;
&lt;/html&gt;</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=head.html'></script>
<noscript><pre><code>&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot;&gt;
	&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;

	&lt;title&gt;{{ page.title }}&lt;/title&gt;
	&lt;meta name=&quot;description&quot; content=&quot;{{ page.description }}&quot;&gt;
	&lt;meta name=&quot;author&quot; content=&quot;{{ site.author }}&quot;&gt;

	&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;

	&lt;link rel=&quot;stylesheet&quot; href=&quot;css/style.css&quot;&gt;

	&lt;script src=&quot;js/libs/modernizr-2.0.6.min.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=header.html'></script>
<noscript><pre><code>&lt;div id=&quot;header-container&quot;&gt;
	&lt;header class=&quot;wrapper clearfix&quot;&gt;
		&lt;h1 id=&quot;title&quot;&gt;&lt;a href=&quot;{{ site.url }}&quot;&gt;{{ site.title }}&lt;/a&gt;&lt;/h1&gt;
		&lt;nav&gt;
			&lt;ul&gt;
				&lt;li&gt;&lt;a href=&quot;{{ site.url }}&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;{{ site.url }}demo.html&quot;&gt;Demo&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;{{ site.url }}documents.html&quot;&gt;Documents&lt;/a&gt;&lt;/li&gt;
			&lt;/ul&gt;
		&lt;/nav&gt;
	&lt;/header&gt;
&lt;/div&gt;</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=aside.html'></script>
<noscript><pre><code>&lt;aside&gt;
	&lt;h3&gt;aside&lt;/h3&gt;
	&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor. Etiam ullamcorper lorem dapibus velit suscipit ultrices.&lt;/p&gt;
&lt;/aside&gt;</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=footer.html'></script>
<noscript><pre><code>&lt;div id=&quot;footer-container&quot;&gt;
	&lt;footer class=&quot;wrapper&quot;&gt;
		&lt;h3&gt;footer&lt;/h3&gt;
	&lt;/footer&gt;
&lt;/div&gt;</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=script.html'></script>
<noscript><pre><code>&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;window.jQuery || document.write('&lt;script src=&quot;js/libs/jquery-1.7.1.min.js&quot;&gt;&lt;\/script&gt;')&lt;/script&gt;

&lt;script src=&quot;js/script.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
	var _gaq=[['_setAccount','{{ site.google_analytics_tracking_id }}'],['_trackPageview']];
	(function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;
	g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
	s.parentNode.insertBefore(g,s)}(document,'script'));
&lt;/script&gt;

&lt;!--[if lt IE 7 ]&gt;
	&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.2/CFInstall.min.js&quot;&gt;&lt;/script&gt;
	&lt;script&gt;window.attachEvent(&quot;onload&quot;,function(){CFInstall.check({mode:&quot;overlay&quot;})})&lt;/script&gt;
&lt;![endif]--&gt;</code></pre></noscript></div>

<div><script src='https://gist.github.com/1532144.js?file=index.md'></script>
<noscript><pre><code>---
layout: default
title: &quot;サンプル・ページ&quot;
---

article header h1
=================
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec.

article section h2
------------------
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor. Etiam ullamcorper lorem dapibus velit suscipit ultrices. Proin in est sed erat facilisis pharetra.

article section h2
------------------
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor. Etiam ullamcorper lorem dapibus velit suscipit ultrices. Proin in est sed erat facilisis pharetra.


### article footer h3 ###
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sodales urna non odio egestas tempor. Nunc vel vehicula ante. Etiam bibendum iaculis libero, eget molestie nisl pharetra in. In semper consequat est, eu porta velit mollis nec. Curabitur posuere enim eget turpis feugiat tempor.</code></pre></noscript></div>
</p>

<h4 id="section-1">参考情報</h4>
<ul>
  <li>
    <p><a href="http://mattn.kaoriya.net/software/lang/ruby/20090409185248.htm">Big Sky :: Jekyllで始める簡単ブログ</a><br />
  jekyll でブログを作るためのファイル構成が解説されている。</p>
  </li>
  <li>
    <p><a href="http://www.ksr-it.net/pdf/kushiro-jekyll-text.pdf">Jekyllによる静的 Webサイト構築入門</a><br />
  <a href="https://github.com/mojombo/jekyll/wiki/_pages">mojombo/jekyll の Wiki</a> をかなりの範囲でカバーする、わかりやすい入門書。Windows へのインストール方法も解説されている。</p>
  </li>
  <li>
    <p><a href="http://radiumsoftware.tumblr.com/post/10518849682">GitHub Pagesで楽々ホスティング - Radium Software</a><br />
  Jekyll 用に構築された <a href="https://github.com/unity-yb/unity-yb.github.com">GitHub ユーザーページ用リポジトリ</a> が参考になる。</p>
  </li>
</ul>
]]></content>
  </entry>
  
</feed>
